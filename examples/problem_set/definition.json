{
  "name": "Problem Set & Lecture Training",
  "description": "Collection of titles from CS2109S problem sets and lecture trainings",
  "restricted": false,
  "published": true,
  "tasks": [
    {
      "id": 0,
      "type": "MULTIPLE_CHOICE_TASK",
      "title": "True or False: Uniform Cost Search is a special case of A* search.",
      "order_index": 0,
      "choices": [
        {
          "id": "43301A24-9CEC-4A31-9F56-126FCB53EB0B",
          "order_index": 0,
          "text": "True"
        },
        {
          "id": "10D3C3A3-C477-4629-9DA7-05E5FC9F5966",
          "order_index": 1,
          "text": "False"
        }
      ],
      "expected_answer": "43301A24-9CEC-4A31-9F56-126FCB53EB0B"
    },
    {
      "id": 1,
      "type": "MULTIPLE_RESPONSE_TASK",
      "title": "Suppose you have a trained logistic classifier, and it outputs on a new example a prediction hw(x) = 0.4. Which of the following is/are true? Select all that apply.",
      "order_index": 1,
      "choices": [
        {
          "id": "5F4ED06B-96C6-40BC-B78A-D7433C0504F1",
          "order_index": 0,
          "text": "P(y = 1 |x, w) = 0.4"
        },
        {
          "id": "4950AA73-50DD-48B7-970C-B48A7F9293B9",
          "order_index": 1,
          "text": "P(y = 0 |x, w) = 0.4"
        },
        {
          "id": "B31B6B51-209F-4980-A53C-34F7C3E90707",
          "order_index": 2,
          "text": "P(y = 1 |x, w) = 0.6"
        },
        {
          "id": "AD96E025-E752-4325-899E-71C8DFB27A6A",
          "order_index": 3,
          "text": "P(y = 0 |x, w) = 0.6"
        }
      ],
      "expected_answer": [
        "5F4ED06B-96C6-40BC-B78A-D7433C0504F1",
        "AD96E025-E752-4325-899E-71C8DFB27A6A"
      ]
    },
    {
      "id": 2,
      "type": "SHORT_ANSWER_TASK",
      "autograde": false,
      "title": "Propose a state representation for the Missionaries & Cannibals problem if we want to formulate it as a search problem and define the corresponding actions.",
      "order_index": 2
    },
    {
      "id": 3,
      "type": "PROGRAMMING_TASK",
      "title": "Implement Tree Search",
      "order_index": 3,
      "environment": {
        "language": "PYTHON",
        "extra_options": {
          "version": "3.12.8"
        },
        "time_limit_secs": 10,
        "memory_limit_mb": 500
      },
      "required_inputs": [
        {
          "id": "__TREE_SEARCH_FILE__",
          "label": "tree_search.py",
          "data": {
            "id": "__TREE_SEARCH_FILE__",
            "path": "tree_search.py",
            "content": "import queue\n\ndef mnc_tree_search(m, c):\n\traise NotImplememented()"
          }
        }
      ],
      "files": [],
      "testcases": [
        {
          "id": "__TESTCASE_1__",
          "order_index": 0,
          "nodes": [
            {
              "id": "__USER_INPUT__",
              "type": "INPUT_STEP",
              "is_user": true,
              "outputs": [
                {
                  "id": "__TREE_SEARCH_FILE__",
                  "label": "TREE_SEARCH"
                }
              ]
            },
            {
              "id": "__INPUT__",
              "type": "INPUT_STEP",
              "outputs": [
                {
                  "id": "__EXPECTED_RESULT__",
                  "label": "EXPECTED_RESULT",
                  "data": "((2, 0), (1, 0), (1, 1))"
                }
              ]
            },
            {
              "id": "__PY_RUN_TREE_SEARCH__",
              "type": "PY_RUN_FUNCTION_STEP",
              "function_identifier": "mnc_tree_search",
              "inputs": [
                {
                  "id": "__MODULE__",
                  "import_as_module": true
                },
                {
                  "id": "__ARG_0__",
                  "arg_metadata": {
                    "position": 0
                  },
                  "data": 2
                },
                {
                  "id": "__ARG_1__",
                  "arg_metadata": {
                    "position": 1
                  },
                  "data": 1
                }
              ],
              "outputs": [
                {
                  "id": "__RESULT__",
                  "label": "TREE_SEARCH_RESULT"
                }
              ]
            },
            {
              "id": "__MATCH__",
              "type": "STRING_MATCH_STEP",
              "inputs": [
                {
                  "id": "__1__",
                  "label": "Operand 1"
                },
                {
                  "id": "__2__",
                  "label": "Operand 2"
                }
              ],
              "outputs": [
                {
                  "id": "__MATCH_RESULT__",
                  "label": "Does it match?"
                }
              ]
            },
            {
              "id": "__OUTPUT__",
              "type": "OUTPUT_STEP",
              "inputs": [
                {
                  "id": "__RESULT__",
                  "label": "Do strings match?",
                  "comparison": {
                    "operator": "=",
                    "value": true
                  },
                  "public": true
                }
              ]
            }
          ],
          "edges": [
            {
              "id": "1",
              "from_node_id": "__USER_INPUT__",
              "from_socket_id": "__TREE_SEARCH_FILE__",
              "to_node_id": "__PY_RUN_TREE_SEARCH__",
              "to_socket_id": "__MODULE__"
            },
            {
              "id": "4",
              "from_node_id": "__PY_RUN_TREE_SEARCH__",
              "from_socket_id": "__RESULT__",
              "to_node_id": "__MATCH__",
              "to_socket_id": "__1__"
            },
            {
              "id": "5",
              "from_node_id": "__INPUT__",
              "from_socket_id": "__EXPECTED_RESULT__",
              "to_node_id": "__MATCH__",
              "to_socket_id": "__2__"
            },
            {
              "id": "6",
              "from_node_id": "__MATCH__",
              "from_socket_id": "__MATCH_RESULT__",
              "to_node_id": "__OUTPUT__",
              "to_socket_id": "__RESULT__"
            }
          ]
        }
      ]
    }
  ]
}
